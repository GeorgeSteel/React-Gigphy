{"version":3,"sources":["serviceWorker.js","components/AddCategory.jsx","helpers/getGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.jsx","components/GifExpertApp.jsx","index.js"],"names":["Boolean","window","location","hostname","match","AddCategory","setCategories","useState","categorie","setCategorie","onSubmit","e","preventDefault","prevState","type","value","onChange","target","getGifs","category","a","url","process","encodeURI","fetch","resp","json","data","imgs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","fetchGifs","useFetchGifs","gif","key","GifExpertApp","categories","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCQSC,MAvBf,YAAyC,IAAlBC,EAAiB,EAAjBA,cAAiB,EACJC,mBAAS,IADL,mBAC/BC,EAD+B,KACpBC,EADoB,KAYtC,OACE,0BAAMC,SAVa,SAAAC,GAGnB,GAFAA,EAAEC,iBAEgB,KAAdJ,EAAkB,OAAO,KAE7BF,GAAc,SAAAO,GAAS,OAAKL,GAAL,mBAAmBK,OAC1CJ,EAAa,MAKX,2BAAOK,KAAK,OAAOC,MAAOP,EAAWQ,SAZpB,SAAAL,GAAC,OAAIF,EAAaE,EAAEM,OAAOF,Y,uBCLrCG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACfC,EADe,uDAEnBC,mCAFmB,cAGfC,UAAUJ,GAHK,sBAIFK,MAAMH,GAJJ,cAIfI,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAG,YAAK,CAC5BC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXX,IAAG,UAAES,EAAIG,cAAN,aAAE,EAAYC,iBAAiBb,QATf,kBAYdO,GAZc,4CAAH,sDCkBLO,MAff,YAAsC,IAAfH,EAAc,EAAdA,MAAOX,EAAO,EAAPA,IAC5B,OACE,yBAAKe,UAAU,8CACb,yBAAKC,IAAKhB,EAAKiB,IAAKN,IACpB,2BAAIA,KCsBKO,MAtBf,YAAgC,IAAbpB,EAAY,EAAZA,SAAY,ECJhB,SAAsBA,GAAW,IAAD,EACnBZ,mBAAS,CACjCoB,KAAM,GACNa,SAAS,IAHkC,mBACtCC,EADsC,KAC/BC,EAD+B,KAkB7C,OAZAC,qBAAU,YACO,uCAAG,4BAAAvB,EAAA,sEACGF,EAAQC,GADX,OACVS,EADU,OAEhBc,EAAS,CACPf,KAAMC,EACNY,SAAS,IAJK,2CAAH,qDAQfI,KACC,CAACzB,IAEGsB,EDbmBI,CAAa1B,GAA/BQ,EADqB,EACrBA,KAAMa,EADe,EACfA,QAEd,OACE,oCACE,4BAAKrB,GAEJqB,GAAW,yCAEZ,yBAAKJ,UAAU,aACZT,EAAKE,KAAI,SAAAiB,GAAG,OACX,kBAAC,EAAD,eAAaC,IAAKD,EAAIf,IAAQe,UEdzB,SAASE,IAAgB,IAAD,EACDzC,mBAAS,CAAC,kBADT,mBAC9B0C,EAD8B,KAClB3C,EADkB,KAGrC,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BACG2C,EAAWpB,KAAI,SAAArB,GAAS,OACvB,kBAAC,EAAD,CAASuC,IAAKvC,EAAWW,SAAUX,SCR7C0C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACJ,EAAD,OAEFK,SAASC,eAAe,SPwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.37cd9ae5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nfunction AddCategory({ setCategories }) {\n  const [categorie, setCategorie] = useState('')\n  const handleChange = e => setCategorie(e.target.value)\n  const handleSubmit = e => {\n    e.preventDefault()\n\n    if (categorie === '') return null\n\n    setCategories(prevState => [categorie, ...prevState])\n    setCategorie('')\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type='text' value={categorie} onChange={handleChange} />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n}\n\nexport default AddCategory\n","export const getGifs = async category => {\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=${\n    process.env.REACT_APP_API_KEY\n  }&q=${encodeURI(category)}&limit=10`\n  const resp = await fetch(url)\n  const { data } = await resp.json()\n  const imgs = data.map(img => ({\n    id: img.id,\n    title: img.title,\n    url: img.images?.downsized_medium.url,\n  }))\n\n  return imgs\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction GifGridItem({ title, url }) {\n  return (\n    <div className='card animate__animated animate__fadeInDown'>\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  )\n}\n\nGifGridItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n}\n\nexport default GifGridItem\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport useFetchGifs from '../hooks/useFetchGifs'\n\nimport GifGridItem from './GifGridItem'\n\nfunction GifGrid({ category }) {\n  const { data, loading } = useFetchGifs(category)\n\n  return (\n    <>\n      <h3>{category}</h3>\n\n      {loading && <p>Loading...</p>}\n\n      <div className='card-grid'>\n        {data.map(gif => (\n          <GifGridItem key={gif.id} {...gif} />\n        ))}\n      </div>\n    </>\n  )\n}\n\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired,\n}\n\nexport default GifGrid\n","import { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs'\n\nexport default function useFetchGifs(category) {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  })\n\n  useEffect(() => {\n    const fetchGifs = async () => {\n      const imgs = await getGifs(category)\n      setState({\n        data: imgs,\n        loading: false,\n      })\n    }\n\n    fetchGifs()\n  }, [category])\n\n  return state\n}\n","import React, { useState } from 'react'\nimport AddCategory from './AddCategory'\nimport GifGrid from './GifGrid'\n\nexport default function GifExpertApp() {\n  const [categories, setCategories] = useState(['One Punch Man'])\n\n  return (\n    <>\n      <h1>GifExpertApp</h1>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {categories.map(categorie => (\n          <GifGrid key={categorie} category={categorie} />\n        ))}\n      </ol>\n    </>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\nimport GifExpertApp from './components/GifExpertApp'\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}